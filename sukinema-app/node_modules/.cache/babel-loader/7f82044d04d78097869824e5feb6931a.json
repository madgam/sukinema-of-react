{"ast":null,"code":"import noimageDrop from '../assets/img/noimages.png';\nimport noimagePos from '../assets/img/no_images_po.jpg';\nimport { GetDistance } from './index';\n\nconst replaceAll = (str, beforeStr, afterStr) => {\n  const reg = new RegExp(beforeStr, 'g');\n  return str.replace(reg, afterStr);\n};\n\nconst getDiff = startTime => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = now.getMonth() + 1;\n  const date = now.getDate(); // const midnightTime = '25:00';\n  // const startTimeArray = midnightTime.split(':');\n\n  const startTimeArray = startTime.split(':');\n  let startYear = 0;\n  let startMonth = 0;\n  let startDate = 0;\n  let startHours = 0;\n  let startMinutes = 0;\n\n  if (Number(startTimeArray[0]) > 23) {// 24時以降の時間の処理\n  } else {\n    startYear = year;\n    startMonth = month;\n    startDate = date;\n    startHours = Number(startTimeArray[0]);\n    startMinutes = Number(startTimeArray[1]);\n  }\n\n  const start = new Date(startYear, startMonth - 1, startDate, startHours, startMinutes);\n  const diff = start.getTime() - now.getTime(); //HH部分取得\n\n  let diffHour = diff / (1000 * 60 * 60); //MM部分取得\n\n  let diffMinute = (diffHour - Math.floor(diffHour)) * 60;\n  return Math.floor(diffHour) * 60 + Math.floor(diffMinute);\n};\n\nconst SetValue = (movies, latlong) => {\n  let cleanserdMovies = [];\n  let count = 0;\n  const currnetLatitude = latlong.latitude;\n  const currnetLongitude = latlong.longitude;\n  movies.forEach(e => {\n    const index = ('000' + count).slice(-3);\n    const diffTime = getDiff(e.time);\n\n    if (diffTime < 0) {\n      return;\n    } else if (diffTime < 10 || diffTime > 120) {\n      return;\n    }\n\n    const distance = GetDistance(currnetLatitude, currnetLongitude, e.latitude, e.longitude);\n\n    const _ratingNum = +'000' + String(e.review * 10 - e.review * 10 % 5);\n\n    const ratingClass = 'rating rating_' + _ratingNum.slice(-2);\n\n    let drop_path = e.drop_path;\n\n    if (drop_path) {\n      drop_path = `https://image.tmdb.org/t/p/w1000_and_h563_face${drop_path}`;\n    } else {\n      drop_path = noimageDrop;\n    }\n\n    let poster_path = e.poster_path;\n\n    if (poster_path) {\n      poster_path = `https://image.tmdb.org/t/p/w300_and_h450_face${poster_path}`;\n    } else {\n      poster_path = noimagePos;\n    }\n\n    const release_date = e.release_date ? e.release_date : '-';\n    const description = e.description ? e.description : '説明文が取得できませんでした';\n    cleanserdMovies.push({\n      index: index,\n      distance: distance,\n      latitude: e.latitude,\n      longitude: e.latitude,\n      ratingClass: ratingClass,\n      diff_time: diffTime,\n      drop_path: drop_path,\n      poster_path: poster_path,\n      title: e.title,\n      theater: e.theater,\n      description: description,\n      link: e.link,\n      release_date: release_date,\n      review: e.review,\n      time: e.time,\n      all_time: replaceAll(e.all_time, ',', ' / ')\n    });\n    count++;\n  });\n  return cleanserdMovies;\n};\n\nexport default SetValue;","map":{"version":3,"sources":["/usr/src/app/sukinema-app/src/helpers/SetValue.js"],"names":["noimageDrop","noimagePos","GetDistance","replaceAll","str","beforeStr","afterStr","reg","RegExp","replace","getDiff","startTime","now","Date","year","getFullYear","month","getMonth","date","getDate","startTimeArray","split","startYear","startMonth","startDate","startHours","startMinutes","Number","start","diff","getTime","diffHour","diffMinute","Math","floor","SetValue","movies","latlong","cleanserdMovies","count","currnetLatitude","latitude","currnetLongitude","longitude","forEach","e","index","slice","diffTime","time","distance","_ratingNum","String","review","ratingClass","drop_path","poster_path","release_date","description","push","diff_time","title","theater","link","all_time"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB,KAA8B;AAC/C,QAAMC,GAAG,GAAG,IAAIC,MAAJ,CAAWH,SAAX,EAAsB,GAAtB,CAAZ;AACA,SAAOD,GAAG,CAACK,OAAJ,CAAYF,GAAZ,EAAiBD,QAAjB,CAAP;AACD,CAHD;;AAKA,MAAMI,OAAO,GAAIC,SAAD,IAAe;AAC7B,QAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,IAAI,GAAGF,GAAG,CAACG,WAAJ,EAAb;AACA,QAAMC,KAAK,GAAGJ,GAAG,CAACK,QAAJ,KAAiB,CAA/B;AACA,QAAMC,IAAI,GAAGN,GAAG,CAACO,OAAJ,EAAb,CAJ6B,CAM7B;AACA;;AACA,QAAMC,cAAc,GAAGT,SAAS,CAACU,KAAV,CAAgB,GAAhB,CAAvB;AAEA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,MAAIC,MAAM,CAACP,cAAc,CAAC,CAAD,CAAf,CAAN,GAA4B,EAAhC,EAAoC,CAClC;AACD,GAFD,MAEO;AACLE,IAAAA,SAAS,GAAGR,IAAZ;AACAS,IAAAA,UAAU,GAAGP,KAAb;AACAQ,IAAAA,SAAS,GAAGN,IAAZ;AACAO,IAAAA,UAAU,GAAGE,MAAM,CAACP,cAAc,CAAC,CAAD,CAAf,CAAnB;AACAM,IAAAA,YAAY,GAAGC,MAAM,CAACP,cAAc,CAAC,CAAD,CAAf,CAArB;AACD;;AACD,QAAMQ,KAAK,GAAG,IAAIf,IAAJ,CACZS,SADY,EAEZC,UAAU,GAAG,CAFD,EAGZC,SAHY,EAIZC,UAJY,EAKZC,YALY,CAAd;AAOA,QAAMG,IAAI,GAAGD,KAAK,CAACE,OAAN,KAAkBlB,GAAG,CAACkB,OAAJ,EAA/B,CAhC6B,CAkC7B;;AACA,MAAIC,QAAQ,GAAGF,IAAI,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAnB,CAnC6B,CAoC7B;;AACA,MAAIG,UAAU,GAAG,CAACD,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAZ,IAAoC,EAArD;AAEA,SAAOE,IAAI,CAACC,KAAL,CAAWH,QAAX,IAAuB,EAAvB,GAA4BE,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAnC;AACD,CAxCD;;AA0CA,MAAMG,QAAQ,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACpC,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,QAAMC,eAAe,GAAGH,OAAO,CAACI,QAAhC;AACA,QAAMC,gBAAgB,GAAGL,OAAO,CAACM,SAAjC;AACAP,EAAAA,MAAM,CAACQ,OAAP,CAAgBC,CAAD,IAAO;AACpB,UAAMC,KAAK,GAAG,CAAC,QAAQP,KAAT,EAAgBQ,KAAhB,CAAsB,CAAC,CAAvB,CAAd;AACA,UAAMC,QAAQ,GAAGtC,OAAO,CAACmC,CAAC,CAACI,IAAH,CAAxB;;AACA,QAAID,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACD,KAFD,MAEO,IAAIA,QAAQ,GAAG,EAAX,IAAiBA,QAAQ,GAAG,GAAhC,EAAqC;AAC1C;AACD;;AACD,UAAME,QAAQ,GAAGhD,WAAW,CAC1BsC,eAD0B,EAE1BE,gBAF0B,EAG1BG,CAAC,CAACJ,QAHwB,EAI1BI,CAAC,CAACF,SAJwB,CAA5B;;AAMA,UAAMQ,UAAU,GAAG,CAAC,KAAD,GAASC,MAAM,CAACP,CAAC,CAACQ,MAAF,GAAW,EAAX,GAAkBR,CAAC,CAACQ,MAAF,GAAW,EAAZ,GAAkB,CAApC,CAAlC;;AACA,UAAMC,WAAW,GAAG,mBAAmBH,UAAU,CAACJ,KAAX,CAAiB,CAAC,CAAlB,CAAvC;;AACA,QAAIQ,SAAS,GAAGV,CAAC,CAACU,SAAlB;;AACA,QAAIA,SAAJ,EAAe;AACbA,MAAAA,SAAS,GAAI,iDAAgDA,SAAU,EAAvE;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAGvD,WAAZ;AACD;;AACD,QAAIwD,WAAW,GAAGX,CAAC,CAACW,WAApB;;AACA,QAAIA,WAAJ,EAAiB;AACfA,MAAAA,WAAW,GAAI,gDAA+CA,WAAY,EAA1E;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAGvD,UAAd;AACD;;AACD,UAAMwD,YAAY,GAAGZ,CAAC,CAACY,YAAF,GAAiBZ,CAAC,CAACY,YAAnB,GAAkC,GAAvD;AACA,UAAMC,WAAW,GAAGb,CAAC,CAACa,WAAF,GAChBb,CAAC,CAACa,WADc,GAEhB,gBAFJ;AAGApB,IAAAA,eAAe,CAACqB,IAAhB,CAAqB;AACnBb,MAAAA,KAAK,EAAEA,KADY;AAEnBI,MAAAA,QAAQ,EAAEA,QAFS;AAGnBT,MAAAA,QAAQ,EAAEI,CAAC,CAACJ,QAHO;AAInBE,MAAAA,SAAS,EAAEE,CAAC,CAACJ,QAJM;AAKnBa,MAAAA,WAAW,EAAEA,WALM;AAMnBM,MAAAA,SAAS,EAAEZ,QANQ;AAOnBO,MAAAA,SAAS,EAAEA,SAPQ;AAQnBC,MAAAA,WAAW,EAAEA,WARM;AASnBK,MAAAA,KAAK,EAAEhB,CAAC,CAACgB,KATU;AAUnBC,MAAAA,OAAO,EAAEjB,CAAC,CAACiB,OAVQ;AAWnBJ,MAAAA,WAAW,EAAEA,WAXM;AAYnBK,MAAAA,IAAI,EAAElB,CAAC,CAACkB,IAZW;AAanBN,MAAAA,YAAY,EAAEA,YAbK;AAcnBJ,MAAAA,MAAM,EAAER,CAAC,CAACQ,MAdS;AAenBJ,MAAAA,IAAI,EAAEJ,CAAC,CAACI,IAfW;AAgBnBe,MAAAA,QAAQ,EAAE7D,UAAU,CAAC0C,CAAC,CAACmB,QAAH,EAAa,GAAb,EAAkB,KAAlB;AAhBD,KAArB;AAkBAzB,IAAAA,KAAK;AACN,GAnDD;AAoDA,SAAOD,eAAP;AACD,CA1DD;;AA4DA,eAAeH,QAAf","sourcesContent":["import noimageDrop from '../assets/img/noimages.png';\nimport noimagePos from '../assets/img/no_images_po.jpg';\nimport { GetDistance } from './index';\n\nconst replaceAll = (str, beforeStr, afterStr) => {\n  const reg = new RegExp(beforeStr, 'g');\n  return str.replace(reg, afterStr);\n};\n\nconst getDiff = (startTime) => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = now.getMonth() + 1;\n  const date = now.getDate();\n\n  // const midnightTime = '25:00';\n  // const startTimeArray = midnightTime.split(':');\n  const startTimeArray = startTime.split(':');\n\n  let startYear = 0;\n  let startMonth = 0;\n  let startDate = 0;\n  let startHours = 0;\n  let startMinutes = 0;\n\n  if (Number(startTimeArray[0]) > 23) {\n    // 24時以降の時間の処理\n  } else {\n    startYear = year;\n    startMonth = month;\n    startDate = date;\n    startHours = Number(startTimeArray[0]);\n    startMinutes = Number(startTimeArray[1]);\n  }\n  const start = new Date(\n    startYear,\n    startMonth - 1,\n    startDate,\n    startHours,\n    startMinutes\n  );\n  const diff = start.getTime() - now.getTime();\n\n  //HH部分取得\n  let diffHour = diff / (1000 * 60 * 60);\n  //MM部分取得\n  let diffMinute = (diffHour - Math.floor(diffHour)) * 60;\n\n  return Math.floor(diffHour) * 60 + Math.floor(diffMinute);\n};\n\nconst SetValue = (movies, latlong) => {\n  let cleanserdMovies = [];\n  let count = 0;\n  const currnetLatitude = latlong.latitude;\n  const currnetLongitude = latlong.longitude;\n  movies.forEach((e) => {\n    const index = ('000' + count).slice(-3);\n    const diffTime = getDiff(e.time);\n    if (diffTime < 0) {\n      return;\n    } else if (diffTime < 10 || diffTime > 120) {\n      return;\n    }\n    const distance = GetDistance(\n      currnetLatitude,\n      currnetLongitude,\n      e.latitude,\n      e.longitude\n    );\n    const _ratingNum = +'000' + String(e.review * 10 - ((e.review * 10) % 5));\n    const ratingClass = 'rating rating_' + _ratingNum.slice(-2);\n    let drop_path = e.drop_path;\n    if (drop_path) {\n      drop_path = `https://image.tmdb.org/t/p/w1000_and_h563_face${drop_path}`;\n    } else {\n      drop_path = noimageDrop;\n    }\n    let poster_path = e.poster_path;\n    if (poster_path) {\n      poster_path = `https://image.tmdb.org/t/p/w300_and_h450_face${poster_path}`;\n    } else {\n      poster_path = noimagePos;\n    }\n    const release_date = e.release_date ? e.release_date : '-';\n    const description = e.description\n      ? e.description\n      : '説明文が取得できませんでした';\n    cleanserdMovies.push({\n      index: index,\n      distance: distance,\n      latitude: e.latitude,\n      longitude: e.latitude,\n      ratingClass: ratingClass,\n      diff_time: diffTime,\n      drop_path: drop_path,\n      poster_path: poster_path,\n      title: e.title,\n      theater: e.theater,\n      description: description,\n      link: e.link,\n      release_date: release_date,\n      review: e.review,\n      time: e.time,\n      all_time: replaceAll(e.all_time, ',', ' / '),\n    });\n    count++;\n  });\n  return cleanserdMovies;\n};\n\nexport default SetValue;\n"]},"metadata":{},"sourceType":"module"}